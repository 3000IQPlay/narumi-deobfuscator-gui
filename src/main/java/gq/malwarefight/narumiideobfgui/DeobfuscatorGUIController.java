package gq.malwarefight.narumiideobfgui;

import gq.malwarefight.narumiideobfgui.deobfuscatorutils.DeobfuscatorRegistry;
import javafx.fxml.FXML;
import javafx.scene.control.CheckBox;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.layout.VBox;
import javafx.stage.FileChooser;
import org.objectweb.asm.ClassReader;
import uwu.narumi.deobfuscator.Deobfuscator;
import uwu.narumi.deobfuscator.transformer.ComposedTransformer;
import uwu.narumi.deobfuscator.transformer.Transformer;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.HashMap;

public class DeobfuscatorGUIController {

    private File inputFile;
    private File outputFile;
    private final HashMap<CheckBox, Transformer> deobfuscatorHashMap = new HashMap<>();

    @FXML
    public TextField inputName;
    @FXML
    public TextField outputName;
    @FXML
    public VBox buttonContainer;
    @FXML
    public Label result;

    @FXML
    protected void chooseInputFile() {
        FileChooser fileChooser = new FileChooser();
        File input = fileChooser.showOpenDialog(DeobfuscatorGUIApp.stage);
        if (input == null) {
            return;
        }
        inputName.setText(input.getPath());
        this.inputFile = input;
    }

    @FXML
    protected void chooseOutputFile() {
        FileChooser fileChooser = new FileChooser();
        File output = fileChooser.showSaveDialog(DeobfuscatorGUIApp.stage);
        if (output == null) {
            return;
        }
        String path = output.getPath();
        outputName.setText(path);
        this.outputFile = output;
    }

    @FXML
    public void initialize() {
        for (ComposedTransformer composedTransformer : DeobfuscatorRegistry.composedTransformers) {
            CheckBox box = new CheckBox(composedTransformer.name());
            buttonContainer.getChildren().add(box);
            deobfuscatorHashMap.put(box, composedTransformer);
        }
    }

    @FXML
    protected void deobfuscate() {
        if (inputFile == null || outputFile == null){
            result.setText("You need to specify both input and output files!");
            return;
        }
        if (!result.getText().equals("")) {
            result.setText("");
        }
        ArrayList<Transformer> usedTransformers = new ArrayList<>();
        deobfuscatorHashMap.forEach((checkBox, transformer) -> {
            if (checkBox.isSelected()) {
                usedTransformers.add(transformer);
            }
        });
        Transformer[] transformers = new Transformer[usedTransformers.size()];
        usedTransformers.toArray(transformers);
        try {
            Deobfuscator.builder()
                    .input(inputFile.toPath())
                    .output(outputFile.toPath())
                    .transformers(transformers)
                    .classReaderFlags(ClassReader.SKIP_FRAMES)
                    .classWriterFlags(0)
                    .consoleDebug()
                    .build()
                    .start();
        } catch (FileNotFoundException e) {
            return;
        }
        result.setText("Deobfuscation complete");
    }
}